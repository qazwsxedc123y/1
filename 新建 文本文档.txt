蔚悦达:
[图片]

......:
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# 1. 加载数据
url = "https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv"
df = pd.read_csv(url)

# 2. 查看数据基本信息
print("数据基本信息：")
print(df.info())

# 3. 处理缺失值
# 查看缺失值情况
print("\n缺失值情况：")
print(df.isnull().sum())

# 填充缺失值
# 年龄用中位数填充
df['Age'].fillna(df['Age'].median(), inplace=True)

# 船舱号用众数填充
df['Cabin'].fillna(df['Cabin'].mode()[0], inplace=True)

# 登船港口用众数填充
df['Embarked'].fillna(df['Embarked'].mode()[0], inplace=True)

# 再次检查缺失值
print("\n填充后的缺失值情况：")
print(df.isnull().sum())

# 4. 绘图分析
# 设置绘图风格
sns.set(style="whitegrid")

# 绘制生存率与性别的关系
plt.figure(figsize=(8, 6))
sns.barplot(x='Sex', y='Survived', data=df, palette="Set2")
plt.title("生存率与性别的关系")
plt.xlabel("性别")
plt.ylabel("生存率")
plt.show()

# 绘制生存率与年龄的关系
plt.figure(figsize=(10, 6))
sns.histplot(data=df, x='Age', hue='Survived', kde=True, palette="Set1", bins=30)
plt.title("生存率与年龄的关系")
plt.xlabel("年龄")
plt.ylabel("人数")
plt.show()

# 绘制生存率与船舱等级的关系
plt.figure(figsize=(8, 6))
sns.barplot(x='Pclass', y='Survived', data=df, palette="Set3")
plt.title("生存率与船舱等级的关系")
plt.xlabel("船舱等级")
plt.ylabel("生存率")
plt.show()
......:
class Student:
    def __init__(self, student_id, name, gender):
        """
        初始化学生对象
        :param student_id: 学号
        :param name: 姓名
        :param gender: 性别
        """
        self.student_id = student_id
        self.name = name
        self.gender = gender
        self.is_at_school = False  # 是否在学校
        self.is_eating = False  # 是否在吃饭
        self.is_sleeping = False  # 是否在睡觉

    def go_to_school(self):
        """
        上学
        """
        if self.is_at_school:
            print(f"{self.name} 已经在学校了！")
        else:
            self.is_at_school = True
            print(f"{self.name} 去上学了！")

    def leave_school(self):
        """
        放学
        """
        if not self.is_at_school:
            print(f"{self.name} 已经不在学校了！")
        else:
            self.is_at_school = False
            print(f"{self.name} 放学了！")

    def eat(self):
        """
        吃饭
        """
        if self.is_eating:
            print(f"{self.name} 已经在吃饭了！")
        else:
            self.is_eating = True
            print(f"{self.name} 正在吃饭！")

    def sleep(self):
        """
        睡觉
        """
        if self.is_sleeping:
            print(f"{self.name} 已经在睡觉了！")
        else:
            self.is_sleeping = True
            print(f"{self.name} 正在睡觉！")

    def __str__(self):
        """
        返回学生信息
        """
        return (f"学生信息:\n"
                f"学号: {self.student_id}\n"
                f"姓名: {self.name}\n"
                f"性别: {self.gender}\n"
                f"是否在学校: {'是' if self.is_at_school else '否'}\n"
                f"是否在吃饭: {'是' if self.is_eating else '否'}\n"
                f"是否在睡觉: {'是' if self.is_sleeping else '否'}")


# 测试学生类
student1 = Student("001", "张三", "男")
print(student1)  # 打印学生信息

student1.go_to_school()  # 上学
student1.eat()  # 吃饭
student1.sleep()  # 睡觉
student1.leave_school()  # 放学

print(student1)  # 打印更新后的学生信息

......:
def calculate(num1, num2):
    # 提示用户选择操作
    print("请选择要执行的操作：")
    print("1. 加法")
    print("2. 减法")
    print("3. 乘法")
    print("4. 除法")

    # 获取用户输入
    choice = input("请输入你的选择（1/2/3/4）：")

    # 根据用户选择执行相应的操作
    if choice == '1':
        result = num1 + num2
        print(f"{num1} + {num2} = {result}")
    elif choice == '2':
        result = num1 - num2
        print(f"{num1} - {num2} = {result}")
    elif choice == '3':
        result = num1 * num2
        print(f"{num1} * {num2} = {result}")
    elif choice == '4':
        if num2 == 0:
            print("错误：除数不能为0！")
        else:
            result = num1 / num2
            print(f"{num1} / {num2} = {result}")
    else:
        print("无效的选择！")

# 测试函数
calculate(10, 5)

